package s21_data_structures.linear


/*
 * -----------------------------------------------------
 * âœ… Lecture 9: Queue Implementation Using List (Custom)
 * -----------------------------------------------------
 *
 * ðŸ“Œ This lecture shows how to implement a basic Queue in Kotlin
 *     using a MutableList internally.
 *
 * ðŸ§  Key Operations:
 * - enqueue(item): Add at the end
 * - dequeue(): Remove from the front
 * - peek(): Get front without removing
 * - isEmpty(): Check if empty
 * - size(): Current number of elements
 */

class S21Ai_Queue<T> {
    private val items = mutableListOf<T>()

    fun enqueue(element: T) {
        items.add(element)
    }

    fun dequeue(): T? {
        if (items.isEmpty()) return null
        return items.removeFirst()
    }

    fun peek(): T? = items.firstOrNull()

    fun isEmpty(): Boolean = items.isEmpty()

    fun size(): Int = items.size

    fun print() {
        println("ðŸ“¦ Queue â†’ $items")
    }
}

fun main() {
    val queue = S21Ai_Queue<String>()

    println("ðŸ”¹ Enqueue: A, B, C")
    queue.enqueue("A")
    queue.enqueue("B")
    queue.enqueue("C")
    queue.print()

    println("\nðŸ”¹ Front â†’ ${queue.peek()}")
    println("ðŸ”¹ Dequeue â†’ ${queue.dequeue()}")
    queue.print()

    println("\nðŸ”¹ Size â†’ ${queue.size()}")
    println("ðŸ”¹ Is Empty? â†’ ${queue.isEmpty()}")
}

/*
 * -----------------------------------------------------
 * ðŸ“± Custom Queue in Android â€“ Real Use Cases
 * -----------------------------------------------------
 *
 * âœ… Offline Sync Queue:
 *    - Queue user actions (likes, uploads) for retry when back online.

 * âœ… ViewModel Queues:
 *    - Queue UI events like animations, toasts, or one-time actions.

 * âœ… Job Scheduling:
 *    - Manage a pipeline of background jobs in order of creation.

 * âœ… Fragment/Navigation Queue:
 *    - Manually queue up navigation commands or transitions.

 * âœ… Print/Export Queue:
 *    - Apps that generate PDFs or reports often queue these tasks.

 * ðŸ”¹ Use a custom Queue when:
 *    - You want to test, debug, or trace item flow.
 *    - You need full control over behavior or memory efficiency.
 */
