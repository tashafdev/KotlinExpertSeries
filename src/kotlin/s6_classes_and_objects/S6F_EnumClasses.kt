package kotlin.s6_classes_and_objects

/*
    ---------------------------------------------------------------------------
    üìò Kotlin Series ‚Äì Section 6F: Enum Classes
    üì¶ Package: kotlin.s6_classes_and_objects
    üéì Lecture: Enum Classes ‚Äì Roles, Status, and Finite State Models
    ---------------------------------------------------------------------------

    ‚úÖ What This File Covers:
    - What is an enum class?
    - Declaring enums with and without properties
    - Adding methods to enum entries
    - `when` expression with enums
    - Iterating enum values
    - Best practices

    ---------------------------------------------------------------------------
    üéØ What is an Enum?
    ----------------------------------------------------------------------------
    - A type that has a **fixed set of constants**.
    - Often used for roles, states, modes, types, etc.

    ‚úÖ Syntax:
        enum class Direction { NORTH, SOUTH, EAST, WEST }

    ---------------------------------------------------------------------------
    üß± Enum With Properties and Methods
    ----------------------------------------------------------------------------
        enum class Status(val code: Int) {
            SUCCESS(200),
            ERROR(500),
            LOADING(102);

            fun isFinal(): Boolean = this == SUCCESS || this == ERROR
        }

    ---------------------------------------------------------------------------
    üîÑ Useful Enum Functions
    ----------------------------------------------------------------------------
    ‚úÖ `values()` ‚Üí Returns all constants
    ‚úÖ `valueOf(name)` ‚Üí Convert string to enum
    ‚úÖ Enum in `when` ‚Üí Clean, exhaustive

    ---------------------------------------------------------------------------
    ‚úÖ Best Practices:
    - Use enums for known finite options
    - Add behavior using functions inside the enum
    - Avoid adding mutable state
    ---------------------------------------------------------------------------
*/


fun main() {
    // üîÅ Basic enum usage
    val direction = Direction.NORTH
    println("Direction: $direction")

    // üîÅ Enum with property
    val status = Status.ERROR
    println("Status code: ${status.code}")
    println("Is Final? ${status.isFinal()}")

    // üîÑ Using when with enums
    when (direction) {
        Direction.NORTH -> println("You're going up")
        Direction.SOUTH -> println("You're going down")
        Direction.EAST -> println("To the right!")
        Direction.WEST -> println("To the left!")
    }

    // üîÅ values() and iteration
    println("All directions:")
    for (d in Direction.values()) {
        println("- $d")
    }

    val parsed = Direction.valueOf("WEST")
    println("Parsed enum: $parsed")
}

// ‚úÖ Basic Enum
enum class Direction {
    NORTH, SOUTH, EAST, WEST
}

// ‚úÖ Enum with property + method
enum class Status(val code: Int) {
    SUCCESS(200),
    ERROR(500),
    LOADING(102);

    fun isFinal(): Boolean = this == SUCCESS || this == ERROR
}
